GPG_VERSION="2.4.0"
export ZOPEN_TARBALL_URL="https://gnupg.org/ftp/gcrypt/gnupg/gnupg-${GPG_VERSION}.tar.bz2"
export ZOPEN_TARBALL_DEPS="make bzip2 tar curl perl automake autoconf m4 sed gettext zoslib diffutils libgpgerror npth libgcrypt libksba libassuan texinfo pinentry ncurses ntbtls"
export ZOPEN_TYPE="TARBALL"
export ZOPEN_COMP=CLANG
GPG_TTY=$(tty)
export GPG_TTY
export ZOPEN_CHECK_OPTS="-i check"
export ZOPEN_RUNTIME_DEPS="pinentry" 
export ZOPEN_EXTRA_CPPFLAGS="-D_POSIX_REALTIME_SIGNALS"

zopen_check_results()
{
  dir="$1"
  pfx="$2"
  chk="$1/$2_check.log"
  failures=$(egrep "^FAIL:" $chk | wc -l) 
  skipped=$(egrep "^SKIP:" $chk | wc -l)
  passed=$(egrep "^PASS:" $chk | wc -l)
  totalTests=$(($failures+$skipped+$passed))

  # Echo the following information to gauge build health
cat <<ZZ
actualFailures:${failures}
totalTests:${totalTests}
expectedFailures:6
ZZ
}

zopen_append_to_env()
{
  # echo envars outside of PATH, MANPATH, LIBPATH
cat <<ZZ
  export GNUPG_BUILDDIR="\${PWD}"
  if [ ! -z "\$ZOPEN_IN_ZOPEN_BUILD" ]; then
     export GPG_TTY=$(tty)  
  fi
ZZ
}

zopen_append_to_setup()
{
  # echo commands that will run when installing via setup.sh
  echo "GPG_CONF_HOME=\"\$HOME/.gnupg\""
  echo "mkdir -p \$GPG_CONF_HOME" 
echo "cat > \$HOME/.gnupg/gpg-agent.conf <<EOF
pinentry-program \$PINENTRY_HOME/bin/pinentry-tty
log-file \$GPG_CONF_HOME/gpg-agent.log
EOF"

echo "cat > \$HOME/.gnupg/dirmngr.conf <<EOF
standard-resolver
no-use-tor
nameserver 1.1.1.1
EOF"
}

zopen_get_version()
{
  # Modify to echo the version of your tool/library
  # Rather than hardcoding the version, obtain the version by running the tool/library
  echo "${GPG_VERSION}"
}

zopen_append_to_zoslib_env() {
 cat <<EOF
ASCII_TERMINFO|set|PROJECT_ROOT/../../ncurses/ncurses/share/terminfo/
EOF
}
